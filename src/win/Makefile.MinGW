#
# VARCem	Virtual ARchaeological Computer EMulator.
#		An emulator of (mostly) x86-based PC systems and devices,
#		using the ISA,EISA,VLB,MCA  and PCI system buses, roughly
#		spanning the era between 1981 and 1995.
#
#		This file is part of the VARCem Project.
#
#		Makefile for Windows systems using the MinGW32 environment.
#
# Version:	@(#)Makefile.mingw	1.0.2	2020/07/17
#
# Author:	Fred N. van Kempen, <decwiz@yahoo.com>
#
#		Copyright 2018-2020 Fred N. van Kempen.
#
#		Redistribution and  use  in source  and binary forms, with
#		or  without modification, are permitted  provided that the
#		following conditions are met:
#
#		1. Redistributions of  source  code must retain the entire
#		   above notice, this list of conditions and the following
#		   disclaimer.
#
#		2. Redistributions in binary form must reproduce the above
#		   copyright  notice,  this list  of  conditions  and  the
#		   following disclaimer in  the documentation and/or other
#		   materials provided with the distribution.
#
#		3. Neither the  name of the copyright holder nor the names
#		   of  its  contributors may be used to endorse or promote
#		   products  derived from  this  software without specific
#		   prior written permission.
#
# THIS SOFTWARE  IS  PROVIDED BY THE  COPYRIGHT  HOLDERS AND CONTRIBUTORS
# "AS IS" AND  ANY EXPRESS  OR  IMPLIED  WARRANTIES,  INCLUDING, BUT  NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE  ARE  DISCLAIMED. IN  NO  EVENT  SHALL THE COPYRIGHT
# HOLDER OR  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE  GOODS OR SERVICES;  LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED  AND ON  ANY
# THEORY OF  LIABILITY, WHETHER IN  CONTRACT, STRICT  LIABILITY, OR  TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  IN ANY  WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


# Defaults for several build options (possibly defined in a chained file.)
ifndef AUTODEP
 AUTODEP	:= n
endif
ifndef CROSS
 CROSS		:= n
endif
ifndef DEBUG
 DEBUG		:= n
endif
ifndef LOGGING
 LOGGING	:= n
endif
ifndef OPTIM
 OPTIM		:= n
endif
ifndef X64
 X64		:= n
endif


# Name of the library.
ifndef PROG
 PROG		:= libslirp
endif
ifeq ($(DEBUG), y)
 PROG		:= $(PROG)-d
endif


#########################################################################
#		Nothing should need changing from here on..		#
#########################################################################
VPATH		:= win


#
# Select the required build environment. We have, uhm, many..
#
ifneq ($(CROSS), n)
 # Cross-compiling (under Linux), select proper version.
 ifeq ($(X64), y)
  MINGW		:= x86_64-w64-mingw32
 else
  MINGW		:= i686-w64-mingw32
 endif

 ifeq ($(X64), y)
  CPP		:= /usr/bin/$(MINGW)-g++ -m64
  CC		:= /usr/bin/$(MINGW)-gcc -m64
 else
  CPP		:= /usr/bin/$(MINGW)-g++ -m32
  CC		:= /usr/bin/$(MINGW)-gcc -m32
 endif
 PREPROC	:= /usr/bin/$(MINGW)-cpp
 WINDRES	:= /usr/bin/$(MINGW)-windres

 SYSINC		:= -I/usr/$(MINGW)/include -Iwin/mingw/include
 SYSLIB		:= -L/usr/$(MINGW)/lib
else
 # Native compilation using MinGW for Windows.
 ifeq ($(X64), y)
  CPP		:= g++ -m64
  CC		:= gcc -m64
 else
  CPP		:= g++ -m32
  CC		:= gcc -m32
 endif
 PREPROC	:= cpp
 AR		:= ar
 RANLIB		:= ranlib
 STRIP		:= strip
 WINDRES	:= windres
 ifndef CAT
  CAT		:= cat
 endif

 SYSINC		:=
 SYSLIB		:=
endif

DEPS		= -MMD -MF $*.d -c $<
DEPFILE		:= win/.depends-mingw

# Set up the correct toolchain flags.
OPTS		:= -D_CRT_NON_CONFORMING_SWPRINTFS \
		   -D__USE_MINGW_ANSI_STDIO_X
AFLAGS		:= -msse2 -mfpmath=sse
RFLAGS		:= --input-format=rc -O coff
LDFLAGS		:=
ifneq ($(CROSS), n)
  OPTS		+= -DUSE_CROSS
endif
ifeq ($(X64), y)
 ifeq ($(OPTIM), y)
  DFLAGS	:= -march=native
 else
  DFLAGS	:= 
 endif
else
 ifeq ($(OPTIM), y)
  DFLAGS	:= -march=native
 else
  DFLAGS	:= -march=i686
 endif
endif
ifeq ($(DEBUG), y)
 DFLAGS		+= -ggdb -D_DEBUG
 RFLAGS		+= -D_DEBUG
 AOPTIM		:=
 ifndef COPTIM
  COPTIM	:= -Og
 endif
else
 ifeq ($(OPTIM), y)
  AOPTIM	:= -mtune=native
  ifndef COPTIM
   COPTIM	:= -O3
  endif
 else
  ifndef COPTIM
   COPTIM	:= -O3
  endif
 endif
endif

LIBS		:= -mwindows \
		   -lversion -lcomctl32 -lwinmm
LIBS		+= -lws2_32 -lwsock32 -liphlpapi -lpsapi
LIBS		+= -static -lgcc


# Final versions of the toolchain flags.
# FIXME: add the -Wsign-compare option soon!
CFLAGS		:= $(WX_FLAGS) $(OPTS) $(DFLAGS) $(COPTIM) $(AOPTIM) \
		   $(AFLAGS) -fomit-frame-pointer -mstackrealign \
		   -Wall -Wundef #-Wshadow #-Wunused-parameter -Wmissing-declarations

CXXFLAGS	:= $(WX_FLAGS) $(OPTS) $(DFLAGS) $(COPTIM) $(AOPTIM) \
		   $(AFLAGS) -fno-strict-aliasing -fvisibility=hidden \
		   -fvisibility-inlines-hidden \
		   -Wall -Wundef -Wunused-parameter -Wmissing-declarations \
		   -Wno-ctor-dtor-privacy -Woverloaded-virtual


#########################################################################
#		Create the (final) list of objects to build.		#
#########################################################################

OBJ		:= slirp.o host.o misc.o poll.o \
		    cksum.o if.o mbuf.o queue.o sbuf.o socket.o \
		    debug.o stats.o \
		    arp.o bootp.o \
		    ip_icmp.o ip_input.o ip_output.o \
		    tcp_input.o tcp_output.o tcp_subr.o tcp_timer.o \
		    udp.o
ifdef EXOBJ
OBJ		+= $(EXOBJ)
endif


# Build module rules.
ifeq ($(AUTODEP), y)
%.o:		%.c
		@echo $<
		@$(CC) $(CFLAGS) $(DEPS) -c $<

%.o:		%.cpp
		@echo $<
		@$(CPP) $(CXXFLAGS) $(DEPS) -c $<
else
%.o:		%.c
		@echo $<
		@$(CC) $(CFLAGS) -c $<

%.o:		%.cpp
		@echo $<
		@$(CPP) $(CXXFLAGS) -c $<

%.d:		%.c $(wildcard $*.d)
		@echo $<
		@$(CC) $(CFLAGS) $(DEPS) -E $< >NUL

%.d:		%.cpp $(wildcard $*.d)
		@echo $<
		@$(CPP) $(CXXFLAGS) $(DEPS) -E $< >NUL
endif


all:		$(PREBUILD) $(PROG).dll $(PROG).a $(POSTBUILD)


$(PROG).res:	win/libslirp.rc
		@echo Processing $<
		@$(WINDRES) $(RFLAGS) -i $< -o $@

$(PROG).dll:	$(OBJ) $(PROG).res
		@echo Linking $(PROG).dll ..
		@$(CC) $(LDFLAGS) -shared -o $@ \
			-Wl,--out-implib,$(PROG).dll.a \
			$(OBJ) $(PROG).res $(LIBS)
ifneq ($(DEBUG), y)
		@strip --strip-unneeded $(PROG).dll
endif

$(PROG).a:	$(OBJ)
		@echo Creating $(PROG).a ..
		@$(AR) rv $(PROG).a $(OBJ)
		@$(RANLIB) $(PROG).a


clean:
		@echo Cleaning objects..
		@-rm -f *.o
		@-rm -f *.res

clobber:	clean
		@echo Cleaning executables..
		@-rm -f *.d
		@-rm -f *.a
		@-rm -f *.dll
		@-rm -f *.exe
#		@-rm -f $(DEPFILE)

ifneq ($(AUTODEP), y)
depclean:
		@-rm -f $(DEPFILE)
		@echo Creating dependencies..
		@echo # Run "make depends" to re-create this file. >$(DEPFILE)

depends:	DEPOBJ=$(OBJ:%.o=%.d)
depends:	depclean $(OBJ:%.o=%.d)
		@$(CAT) $(DEPOBJ) >>$(DEPFILE)
#		@-rm -f $(DEPOBJ)

$(DEPFILE):
endif


# Module dependencies.
ifeq ($(AUTODEP), y)
#-include $(OBJ:%.o=%.d)  (better, but sloooowwwww)
-include *.d
else
include $(wildcard $(DEPFILE))
endif


# End of Makefile.mingw.
