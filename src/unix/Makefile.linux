#
# VARCem	Virtual ARchaeological Computer EMulator.
#		An emulator of (mostly) x86-based PC systems and devices,
#		using the ISA,EISA,VLB,MCA  and PCI system buses, roughly
#		spanning the era between 1981 and 1995.
#
#		This file is part of the VARCem Project.
#
#		Makefile for UNIX and Linux systems using GCC.
#
# Version:	@(#)Makefile.GCC	1.0.1	2020/07/29
#
# Author:	Fred N. van Kempen, <decwiz@yahoo.com>
#
#		Copyright 2020 Fred N. van Kempen.
#
#		Redistribution and  use  in source  and binary forms, with
#		or  without modification, are permitted  provided that the
#		following conditions are met:
#
#		1. Redistributions of  source  code must retain the entire
#		   above notice, this list of conditions and the following
#		   disclaimer.
#
#		2. Redistributions in binary form must reproduce the above
#		   copyright  notice,  this list  of  conditions  and  the
#		   following disclaimer in  the documentation and/or other
#		   materials provided with the distribution.
#
#		3. Neither the  name of the copyright holder nor the names
#		   of  its  contributors may be used to endorse or promote
#		   products  derived from  this  software without specific
#		   prior written permission.
#
# THIS SOFTWARE  IS  PROVIDED BY THE  COPYRIGHT  HOLDERS AND CONTRIBUTORS
# "AS IS" AND  ANY EXPRESS  OR  IMPLIED  WARRANTIES,  INCLUDING, BUT  NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE  ARE  DISCLAIMED. IN  NO  EVENT  SHALL THE COPYRIGHT
# HOLDER OR  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE  GOODS OR SERVICES;  LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED  AND ON  ANY
# THEORY OF  LIABILITY, WHETHER IN  CONTRACT, STRICT  LIABILITY, OR  TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  IN ANY  WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


# Defaults for several build options (possibly defined in a chained file.)
ifndef AUTODEP
 AUTODEP	:= n
endif
ifndef DEBUG
 DEBUG		:= n
endif
ifndef X64
 X64		:= n
endif


# Name of the library.
ifndef PROG
 PROG		:= libslirp
endif
ifeq ($(DEBUG), y)
 PROG		:= $(PROG)-d
endif


# Select the desired platform.
PLAT		:= Linux
PLATDEFS	:= -DLINUX -DPLAT=\"$(PLAT)\"
PLATNAME	:= linux
PLATDIR		:= unix


# Project settings.
DEFS		:=
POSTBUILD	:= install


#########################################################################
#		Nothing should need changing from here on..		#
#########################################################################
VPATH		:= unix \
		   .


# Select the required build environment.
ifeq ($(X64), y)
 CPP		:= g++ -m64
 CC		:= gcc -m64
 ARCH		:= x64
else
 CPP		:= g++ -m32
 CC		:= gcc -m32
 ARCH		:= x86
endif
PREPROC		:= cpp
MCPP		:= cpp
LINK		:= gcc
AR		:= ar
RANLIB		:= ranlib
STRIP		:= strip

SYSINC		:=
SYSLIB		:=

DEPS		= -MMD -MF $*.d -c $<
DEPFILE		:= $(PLATDIR)/.depends-$(PLATNAME)


# Set up the correct toolchain flags.
OPTS		:= -DUNIX $(PLATDEFS)
AFLAGS		:= -msse2 -mfpmath=sse
COPTS		:= -Wall
CXXOPTS		:= -Wall
DOPTS		:= 
LOPTS		:=
ifeq ($(DEBUG), y)
 OPTS		+= -D_DEBUG
 DOPTS		:= -Og -ggdb
 ROPTS		+= -D_DEBUG
else
 DFLAGS		:= -O3
endif
LIBS		:= -lgcc #-lpthread


# Final versions of the toolchain flags.
LDFLAGS		:= -pthread $(LOPTS)
CFLAGS		:= $(DEFS) $(OPTS) $(COPTS) $(DOPTS) \
		   -fPIC -fno-strict-aliasing -fvisibility=hidden \
		   -fomit-frame-pointer -mstackrealign -Wall -Wundef
CXXFLAGS	:= -I/usr/include/c++/4.8.4 \
		   $(DEFS) $(OPTS) $(CXXOPTS) $(COPTS) $(DOPTS) \
		   -fPIC -fno-strict-aliasing -fvisibility=hidden \
		   -fvisibility-inlines-hidden -Wall -Wundef -Wunused-parameter \
		   -Wmissing-declarations -Wno-ctor-dtor-privacy -Woverloaded-virtual


#########################################################################
#		Create the (final) list of objects to build.		#
#########################################################################

LIBOBJS		:= slirp.o host.o misc.o poll.o \
		    cksum.o if.o mbuf.o queue.o sbuf.o socket.o \
		    debug.o stats.o \
		    arp.o bootp.o \
		    ip_icmp.o ip_input.o ip_output.o \
		    tcp_input.o tcp_output.o tcp_subr.o tcp_timer.o \
		    udp.o


# Build module rules.
ifeq ($(AUTODEP), y)
%.o:		%.c
		@echo $<
		@$(CC) $(CFLAGS) $(DEPS) -c $<

%.o:		%.cpp
		@echo $<
		@$(CPP) $(CXXFLAGS) $(DEPS) -c $<
else
%.o:		%.c
		@echo $<
		@$(CC) $(CFLAGS) -c $<

%.o:		%.cpp
		@echo $<
		@$(CPP) $(CXXFLAGS) -c $<

%.d:		%.c $(wildcard $*.d)
		@echo $<
		@$(CC) $(CFLAGS) $(DEPS) -E $< >NUL

%.d:		%.cpp $(wildcard $*.d)
		@echo $<
		@$(CPP) $(CXXFLAGS) $(DEPS) -E $< >NUL
endif


all:		$(PREBUILD) $(PROG).so $(PROG).a $(POSTBUILD)


$(PROG).so:	$(LIBOBJS)
		@echo Creating $(PROG).so
		$(CC) $(LDFLAGS) -shared -o $(PROG).so $(LIBOBJS) $(LIBS)

$(PROG).a:	$(LIBOBJS)
		@echo Creating $(PROG).a
		@$(AR) rv $(PROG).a $(LIBOBJS)
		@$(RANLIB) $(PROG).a


install:
		@echo Installing SLiRP ..
		@cp $(PROG).so $(PROG).a ../lib/$(ARCH)
		@cp $(PROG).so ../bin/$(ARCH)
		@cp $(PROG).so /usr/local/VARCem/lib
		@cp slirp.h ../include

clean:
		@echo Cleaning objects..
		@-rm -f *.o
		@-rm -f *.res

clobber:	clean
		@echo Cleaning executables..
		@-rm -f *.d
		@-rm -f *.dll
		@-rm -f *.exe
ifeq ($(PROFILER), y)
		@-rm -f *.map
endif
#		@-rm -f $(DEPFILE)

ifneq ($(AUTODEP), y)
depclean:
		@-rm -f $(DEPFILE)
		@echo Creating dependencies..
		@echo # Run "make depends" to re-create this file. >$(DEPFILE)

depends:	DEPOBJ=$(OBJ:%.o=%.d)
depends:	depclean $(OBJ:%.o=%.d)
		@$(CAT) $(DEPOBJ) >>$(DEPFILE)
#		@-rm -f $(DEPOBJ)

$(DEPFILE):
endif


# Module dependencies.
ifeq ($(AUTODEP), y)
#-include $(OBJ:%.o=%.d)  (better, but sloooowwwww)
-include *.d
else
include $(wildcard $(DEPFILE))
endif


# End of Makefile.GCC.
